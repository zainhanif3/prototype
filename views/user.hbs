<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <style>
      .container{ height: 60vh; width: 800px; background-color: rgb(157, 160,
      160); } a href{ background-color: aqua; }
    </style>
  </head>
  <body class="flex-col">

    <h1 class="text-2xl mb-4 p-5 justify-items-center ml-16">User Page</h1>
    <div class="container">

      <form
        action="/add-user"
        method="post"
        class="mb-4 p-5 justify-items-center ml-16"
      >
        <label for="name">Name:</label>
        <input type="text" name="name" required class="mr-2" />
        <label for="email">Email:</label>
        <input type="email" name="email" required class="mr-2" /><br>
        <label for="password">Password:</label>
        <input type="password" name="password" required class="mr-3" />
        <button
          type="submit"
          class="bg-blue-500 text-white px-4 py-2 rounded"
        >Add User</button>
      </form>

      <!-- Search Form -->
      <form
        action="/search"
        method="get"
        class="mb-4 p-5 justify-items-center ml-16 border-gray-600"
      >
        <label for="searchTerm">Search:</label>
        <input type="text" name="searchTerm" required class="mr-2" />
        <select name="searchType" class="mr-2">
          <option value="name">Name</option>
          <option value="email">Email</option>
          <option value="cnic">Cnic</option>
          <option value="number">Number</option>

        </select>
        <button
          type="submit"
          class="bg-green-500 text-white px-4 py-2 rounded"
        >Search</button>
      </form>

      {{!-- <ul class="mb-4 p-5 justify-items-center ml-16">
        {{#each users}}
          <li class="mb-5 p-5 gap-2">
            {{name}}
            -
            {{email}}
            -{{password}}
            <a
              href="/update-user/{{_id}}"
              class="text-blue-500 ml-44 bg-gray-50 border-l-4 text-2xl"
            >Update</a>
            <a
              href="/delete-user/{{_id}}"
              class="text-red-500 ml-10 bg-gray-50 border-l-4 text-2xl"
            >Delete</a>

          </li>
        {{/each}}
      </ul> --}}
       <table class="w-full border">
      <thead>
        <tr class="bg-gray-200">
          <th class="border p-2">Username</th>
          <th class="border p-2">Actions</th>
        </tr>
      </thead>
      <tbody id="userTableBody">
        <!-- User details will be displayed here -->
      </tbody>
    </table>

    <!-- Messages section -->
    <div id="messages" class="mt-4">
      <!-- Messages will be displayed here -->
    </div>
  </div>

  <script>
    // Function to display messages
    function displayMessage(message) {
      const messagesDiv = document.getElementById('messages');
      messagesDiv.innerHTML = `<p>${message}</p>`;
    }

    // Function to display user details in the table
    function displayUserDetails(users) {
      const userTableBody = document.getElementById('userTableBody');
      userTableBody.innerHTML = '';

      users.forEach(user => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td class="border p-2">${user.username}</td>
          <td class="border p-2">
            <button onclick="updateUser('${user._id}', '${user.username}','${user.email}')" class="bg-yellow-500 text-white px-2 py-1 rounded mr-2">Update</button>
            <button onclick="deleteUser('${user._id}')" class="bg-red-500 text-white px-2 py-1 rounded">Delete</button>
          </td>
        `;
        userTableBody.appendChild(row);
      });
    }

    // Function to handle updating a user
    function updateUser(userId, username) {
      const newUsername = prompt('Enter new username:', username);
      if (newUsername !== null) {
        fetch(`/update-user/${userId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ username: newUsername }),
        })
        .then(response => response.text())
        .then(message => {
          displayMessage(message);
          fetchUserDetails();
        });
      }
    }

    // Function to handle deleting a user
    function deleteUser(userId) {
      const confirmation = confirm('Are you sure you want to delete this user?');
      if (confirmation) {
        fetch(`/delete-user/${userId}`, {
          method: 'DELETE',
        })
        .then(response => response.text())
        .then(message => {
          displayMessage(message);
          fetchUserDetails();
        });
      }
    }

    // Function to fetch user details from the server
    function fetchUserDetails() {
      fetch('/fetch-users')
        .then(response => response.json())
        .then(users => displayUserDetails(users));
    }

    // Initial fetch of user details
    fetchUserDetails();
  </script>
    </div>

  </body>
</html>